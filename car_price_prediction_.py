# -*- coding: utf-8 -*-
"""Car Price Prediction .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a88dHoAzH6CZjx8yefbuPbO6O8No8Mox
"""

# import the libaries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

data = pd.read_csv('/content/car data.csv')

data.head()

data.shape

data.isnull().sum()

data.columns

data.info()

data.describe()

data['Fuel_Type'].value_counts()

data['Seller_Type'].value_counts()

data['Transmission'].value_counts()

#replacing categorical columns into numerical columns  as our model will only respond to numbers
data['Fuel_Type'].replace({'Petrol':0 ,'Diesel':1 , 'CNG':2} , inplace=True)
data['Seller_Type'].replace({'Dealer':0 ,'Individual':1} , inplace=True)
data['Transmission'].replace({'Manual':0 ,'Automatic':1} , inplace=True)

data.head()

# splitting the data into training datanad test data
x = data.drop(['Car_Name' , 'Selling_Price'] , axis =1)
y = data['Selling_Price']

print(x)

print(y)

#Splitting training and testing data
x_train,x_test ,y_train,y_test =train_test_split(x ,y ,test_size =0.2 , random_state=2)

#Model Trainig and fit it
model = LinearRegression()
model.fit(x_train,y_train)

prediction = model.predict(x_train)

accuracy = metrics.r2_score(prediction,y_train)

print(accuracy)

#Visualize the actual prices and the predicted prices
plt.scatter(x = y_train,y =prediction)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

# prediction on now for test data
prediction2 = model.predict(x_test)
accuracy2 = metrics.r2_score(prediction2,y_test)
print(accuracy2)

#Visualize the actual prices and the predicted prices
plt.scatter(x = y_test,y =prediction2)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

# Lasso Regreesion

#Model Trainig and fit it
lasso_model = Lasso()
lasso_model.fit(x_train,y_train)

prediction3 = lasso_model.predict(x_train)

accuracy = metrics.r2_score(prediction,y_train)

print(accuracy)

#Visualize the actual prices and the predicted prices
plt.scatter(x = y_train,y =prediction)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

# prediction on now for test data
prediction2 = model.predict(x_test)
accuracy2 = metrics.r2_score(prediction2,y_test)
print(accuracy2)

#Visualize the actual prices and the predicted prices
plt.scatter(x = y_test,y =prediction2)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

