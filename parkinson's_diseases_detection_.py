# -*- coding: utf-8 -*-
"""Parkinson's Diseases Detection .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yng4d70_669MLOCOOVsvmyzhxkDqEe1B
"""

import numpy as np
import pandas  as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.metrics import accuracy_score

data = pd.read_csv('/content/parkinsons.data')

data.head()

data.info()

data.columns

data.describe()

data.shape

data.isnull().sum()

data['status'].value_counts()

# 1 represents the person who have the disease
# 0 represents the person who dont have the disease

data.groupby('status').mean(numeric_only=True)

#Data Pre -Processing
#sepearting features/columns and target as x and y

x = data.drop(columns=['name' , 'status'] , axis = 1)
y = data['status']

print(x)

print(y)

x_train ,x_test , y_train , y_test = train_test_split(x ,y , test_size =0.2 , stratify =y , random_state=2)

print(x.shape , x_train.shape , x_test.shape)

ss = StandardScaler()
x_train_standardized = ss.fit_transform(x_train)
x_test_standardized  = ss.fit_transform(x_test)

print(x_train_standardized)

#Model Training
classifier = svm.SVC(kernel='linear')
classifier.fit(x_train ,y_train)

#Evaluating the model


x_train_prediction = classifier.predict(x_train)
training_accuracy = accuracy_score(x_train_prediction , y_train)
print(f'Accuracy score of the training set  :{training_accuracy}')

x_test_prediction = classifier.predict(x_test)
test_accuracy = accuracy_score(y_test , x_test_prediction)
print(f'Accuracy score of the test set  :{test_accuracy}')

# Ensure that ss has been correctly fitted on data with the same number of features (22)
ss = StandardScaler()
ss.fit(x_train)  # Make sure x_train has 22 features, like your input

# Predictive Model
input_data = (119.99200,157.30200,74.99700,0.00784,0.00007,0.00370,0.00554,0.01109,0.04374,0.42600,0.02182,0.03130,0.02971,0.06545,0.02211,21.03300,0.414783,0.815285,-4.813031,0.266482,2.301442,0.284654)

# Convert the input data to numpy array
input_numpy = np.asarray(input_data)

# Reshape to (1, -1) for prediction
input_reshaped = input_numpy.reshape(1, -1)

# Standardize the input data (make sure ss is fitted properly)
std_data = ss.transform(input_reshaped)

# Predict using the trained classifier
prediction = classifier.predict(std_data)

# Print the prediction result
print(prediction)

if (prediction[0]==0):
  print('The person does not have parkinsons disease')

else:
    print('The person has parkinsons disease')

